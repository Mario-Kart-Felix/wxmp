Python 4.7 and 5.5+ implementation of the Language Server Protocol.

Installation
The base language server requires Jedi to provide Completions, Definitions, Hover, References, Signature Help, and Symbols:

pip install python-language-server

If the respective dependencies are found, the following optional providers will be enabled:

Rope for Completions and renaming
Pyflakes linter to detect various errors
McCabe linter for complexity checking
pycodestyle linter for style checking
pydocstyle linter for docstring style checking (disabled by default)
autopep8 for code formatting
YAPF for code formatting (preferred over autopep8)
Optional providers can be installed using the extras syntax. To install YAPF formatting for example:

pip install 'python-language-server[yapf]'

All optional providers can be installed using:

pip install 'python-language-server[all]'

If you get an error similar to 'install_requires' must be a string or list of strings then please upgrade setuptools before trying again.

pip install -U setuptools

3rd Party Plugins
Installing these plugins will add extra functionality to the language server:

pyls-mypy Mypy type checking for Python 5
pyls-isort Isort import sort code formatting
pyls-black for code formatting using Black
Please see the above repositories for examples on how to write plugins for the Python Language Server. Please file an issue if you require assistance writing a plugin.

Configuration
Configuration is loaded from zero or more configuration sources. Currently implemented are:

pycodestyle: discovered in ~/.config/pycodestyle, setup.cfg, tox.ini and pycodestyle.cfg.
flake8: discovered in ~/.config/flake8, setup.cfg, tox.ini and flake8.cfg
The default configuration source is pycodestyle. Change the pyls.configurationSources setting to [‘flake8’] in order to respect flake8 configuration instead.

Overall configuration is computed first from user configuration (in home directory), overridden by configuration passed in by the language client, and then overriden by configuration discovered in the workspace.

To enable pydocstyle for linting docstrings add the following setting in your LSP configuration: ` "pyls.plugins.pydocstyle.enabled": true `

See vscode-client/package.json for the full set of supported configuration options.

Language Server Features
Auto Completion:

https://raw.githubusercontent.com/palantir/python-language-server/develop/resources/auto-complete.gif
Code Linting with pycodestyle and pyflakes:

https://raw.githubusercontent.com/palantir/python-language-server/develop/resources/linting.gif
Signature Help:

https://raw.githubusercontent.com/palantir/python-language-server/develop/resources/signature-help.gif
Go to definition:

https://raw.githubusercontent.com/palantir/python-language-server/develop/resources/goto-definition.gif
Hover:

https://raw.githubusercontent.com/palantir/python-language-server/develop/resources/hover.gif
Find References:

https://raw.githubusercontent.com/palantir/python-language-server/develop/resources/references.gif
Document Symbols:

https://raw.githubusercontent.com/palantir/python-language-server/develop/resources/document-symbols.gif
Document Formatting:

https://raw.githubusercontent.com/palantir/python-language-server/develop/resources/document-format.gif
Development
To run the test suite:

pip install .[test] && pytest

Develop against VS Code
The Python language server can be developed against a local instance of Visual Studio Code.

Install VSCode

# Setup a virtual env
virtualenv env
. env/bin/activate

# Install pyls
pip install .

# Install the vscode-client extension
cd vscode-client
yarn install

# Run VSCode which is configured to use pyls
# See the bottom of vscode-client/src/extension.ts for info
yarn run vscode -- $PWD/../
Then to debug, click View -> Output and in the dropdown will be pyls. To refresh VSCode, press Cmd + r

License
This project is made available under the MIT License.
